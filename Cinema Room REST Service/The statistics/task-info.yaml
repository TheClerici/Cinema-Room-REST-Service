type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/model/Cinema.java
  visible: true
  text: |
    package cinema.model;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import java.util.*;

    public class Cinema {

        private final Integer total_rows;
        private final Integer total_columns;
        private List<Seat> available_seats;
        @JsonIgnore
        private Map<String, Seat> purchasedTickets;
        @JsonIgnore
        private ArrayList<Integer> purchasedSeats;

        public Cinema(Integer total_rows, Integer total_columns) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            this.available_seats = new ArrayList<>();
            for (int i = 1; i <= total_rows ; i++) {
                for (int j = 1; j <= total_columns; j++) {
                    Seat seat = new Seat(i, j);
                    available_seats.add(seat);
                }
            }
            this.purchasedTickets = new TreeMap<>();
            this.purchasedSeats = new ArrayList<>();
        }

        public void buyTicket(Seat seat, Ticket ticket) {
            purchasedSeats.add(seat.getSeatId());
            available_seats.removeIf(p -> seat.getSeatId() == p.getSeatId());
            purchasedTickets.put(ticket.getToken(), ticket.getTicket());
        }

        public void returnTicket(Seat seat, String token) {
            purchasedTickets.remove(token);
            available_seats.add(seat);
            purchasedSeats.removeIf(p -> p == seat.getSeatId());
            Collections.sort(available_seats);
        }

        public Integer getTotal_rows() {
            return total_rows;
        }

        public Integer getTotal_columns() {
            return total_columns;
        }

        public List<Seat> getAvailable_seats() {
            return available_seats;
        }

        public Map<String, Seat> getPurchasedTickets() {
            return purchasedTickets;
        }

        public ArrayList<Integer> getPurchasedSeats() {
            return purchasedSeats;
        }

        public boolean isSeatOutOfRange(Seat seat) {
            if (seat.getColumn() < 1 || seat.getColumn() > total_columns) {
                return true;
            }
            return seat.getRow() < 1 || seat.getRow() > total_rows;
        }
    }
  learner_created: true
- name: src/cinema/model/Seat.java
  visible: true
  text: |
    package cinema.model;

    //import java.util.UUID;
    //private final UUID token = UUID.randomUUID();

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class Seat implements Comparable<Seat> {

        private int row;
        private int column;
        private final int price;
        @JsonIgnore
        private final int seatId;

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
            this.price = row <= 4 ? 10 : 8;
            this.seatId = (row * 10) + column;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public int getSeatId() {
            return seatId;
        }

        @Override
        public int compareTo(Seat seat) {
            int id = seat.getSeatId();
            return this.seatId - id;
        }
    }
  learner_created: true
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.model.Seat;
    import cinema.service.CinemaService;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    @RestController
    public class CinemaController {

        @Autowired
        private final CinemaService cinemaService;
        public CinemaController(CinemaService cinemaService) {
            this.cinemaService = cinemaService;
        }

        @GetMapping("/seats")
        public ResponseEntity<?> readSeats() {
            return cinemaService.readSeats();
        }

        @PostMapping("/purchase")
        public ResponseEntity<?> purchaseSeat(@RequestBody Seat seat) { return cinemaService.purchaseSeat(seat); }

        @PostMapping("/return")
        public ResponseEntity<?> returnTicket(@RequestBody String token) { return cinemaService.returnTicket(token); }
    }
  learner_created: true
- name: src/cinema/service/CinemaService.java
  visible: true
  text: |
    package cinema.service;

    import cinema.model.Cinema;
    import cinema.model.Seat;
    import cinema.model.Ticket;
    import cinema.response.ResponseHandler;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.stereotype.Service;

    import java.util.Map;

    @Service
    public class CinemaService {
        private final Cinema cinema = new Cinema(9, 9);

        public ResponseEntity<?> readSeats() {
            return ResponseEntity.ok(cinema);
        }

        public ResponseEntity<?> purchaseSeat(Seat seat) {

            if (seat.getRow() < 1 || seat.getRow() > 9)
                return ResponseHandler.generateResponse("The number of a row or a column is out of bounds!", HttpStatus.BAD_REQUEST);

            if (seat.getColumn() < 1 || seat.getColumn()  > 9)
                return ResponseHandler.generateResponse("The number of a row or a column is out of bounds!", HttpStatus.BAD_REQUEST);

            if (cinema.getPurchasedSeats().contains(seat.getSeatId()))
                return ResponseHandler.generateResponse("The ticket has been already purchased!", HttpStatus.BAD_REQUEST);

            Ticket ticket = new Ticket(seat);
            cinema.buyTicket(seat, ticket);

            return ResponseEntity.ok(ticket);
        }

        public ResponseEntity<?> returnTicket(String token) {
            token = token.split(":")[1];
            token = token.substring(1, token.length() - 2);

            if (!cinema.getPurchasedTickets().containsKey(token)) {
                return ResponseHandler.generateResponse("Wrong token!", HttpStatus.BAD_REQUEST);
            }

            Seat seat = cinema.getPurchasedTickets().get(token);
            cinema.returnTicket(seat, token);
            return ResponseEntity.ok(Map.of("returned_ticket", seat));
        }
    }
  learner_created: true
- name: src/cinema/response/ResponseHandler.java
  visible: true
  text: |
    package cinema.response;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;

    import java.util.HashMap;
    import java.util.Map;

    public class ResponseHandler {
        public static ResponseEntity<Object> generateResponse(String message, HttpStatus status) {
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("error", message);

            return new ResponseEntity<Object>(map,status);
        }
    }
  learner_created: true
- name: src/cinema/model/Ticket.java
  visible: true
  text: |
    package cinema.model;

    import java.util.UUID;

    public class Ticket {
        private String token;
        private Seat ticket;

        public Ticket(Seat ticket) {
            this.token = (UUID.randomUUID().toString());
            this.ticket = ticket;
        }

        public String getToken() {
            return token;
        }

        public Seat getTicket() {
            return ticket;
        }

        public void setTicket(Seat ticket) {
            this.ticket = ticket;
        }
    }
  learner_created: true
- name: src/cinema/model/Stats.java
  visible: true
  learner_created: true
- name: src/cinema/exceptions/WrongPasswordException.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13378#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Mon, 05 Dec 2022 23:57:57 UTC"
record: -1
